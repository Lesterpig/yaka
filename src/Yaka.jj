options{
    JDK_VERSION="1.5";
}

PARSER_BEGIN(Yaka)

package generated;
import compiler.*;

public class Yaka {

  public static Declaration declaration;
  public static TabIdent tabIdent;
  public static Expression expression;
  public static Yvm yvm;

  public static void main(String args[]) {
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]);
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File not found.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Reading stdin...");
      input = System.in;
    } else {
      System.out.println("Usage: java Yaka [filename]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      tabIdent = new TabIdent(100);
      tabIdent.addIdent("c1", new IdConst(5));

      analyseur.analyse();

      /*
       * Logique Debug
       */
      System.out.println(tabIdent.toString()); //Affiche le contenu de tabIdent à la fin

      System.out.println("OK!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Syntax error: "+msg);
    }
  }
}

PARSER_END(Yaka)

/*************  TOKENS *************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/* Skip whitespace and comments */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);}
}


/* Mots réservés*/

TOKEN :
{
  <BOOLEEN: "BOOLEEN">
| <VAR: "VAR">
| <FAIRE: "FAIRE">
| <SINON: "SINON">
| <POUR: "POUR">
| <SI: "SI">
| <FSI: "FSI">
| <ENTIER: "ENTIER">
| <RETOURNE: "RETOURNE">
| <VRAI: "VRAI">
| <TANTQUE: "TANTQUE">
| <CONST: "CONST">
| <FAUX: "FAUX">
| <FAIT: "FAIT">
| <OU: "OU">
| <ET: "ET">
| <NON: "NON">
| <FONCTION: "FONCTION">
| <FFONCTION: "FFONCTION">
| <PROGRAMME: "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL: "PRINCIPAL">
| <FPRINCIPAL: "FPRINCIPAL">
| <ALORS: "ALORS">
| <ECRIRE: "ECRIRE">
| <LIRE: "LIRE">
| <ALALIGNE: "ALALIGNE">

}



/* Unites de base : nombres, idents, chaines */
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ >
    { entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
    {identLu =image.toString();
    }
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
    { chaineLue = image.toString();
     }
}


/*************  GRAMMAIRE *************/

void analyse() : {}
{
   <PROGRAMME> <ident>
   bloc()
   <FPROGRAMME>
}

void bloc() : {}{
 (declConst())*
 (declVar())*
   suiteExpr()
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{

  <ident>
   "=" valConst()

}

void valConst() : {}{
  <entier>
 | <ident>
 | <VRAI>
 | <FAUX>
}


void declVar() : {}
{
  <VAR> type()
  <ident> 
  {
  declaration.setIdent(YakaTokenManager.identLu);
  declaration.ajoutVar();
  }
  (","
      <ident>
	  {
	  declaration.setIdent(YakaTokenManager.identLu);
	  declaration.ajoutVar();
	  }
  )* ";"

}

void type() :{}
{
   <ENTIER> {declaration.setType(TypeList.ENTIER);}
 | <BOOLEEN> {declaration.setType(TypeList.BOOLEEN);}
}

void suiteExpr() : {}
{ (expression() (";" {expression.reinitialiser();} (expression())? )*)? }


void expression() : {}
{
  simpleExpr()
  (opRel()
  simpleExpr() {expression.traiterOperation();}
  )?
}

void simpleExpr() : {}
{
   terme()
   (opAdd()
   terme() {expression.traiterOperation();}
   )*
}

void terme() : {}
{
  facteur()
  (opMul()
  facteur() {expression.traiterOperation();}
  )*
}

void facteur() : {}
{   primaire()
  | opNeg() primaire() {expression.traiterOperation();}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")"

}

void valeur () : {}
{ <entier> {expression.ajoutType(TypeList.ENTIER);}
 | <ident> {expression.ajoutType(tabIdent.searchIdent(YakaTokenManager.identLu).getType());}
 | <VRAI> {expression.ajoutType(TypeList.BOOLEEN);}
 | <FAUX> {expression.ajoutType(TypeList.BOOLEEN);}
}

void opRel() : {}
{
   "=" {expression.ajoutOperateur(new Operateur(OpList.EG));}
 | "<>" {expression.ajoutOperateur(new Operateur(OpList.DIFF));}
 | "<" {expression.ajoutOperateur(new Operateur(OpList.INF));}
 | "<=" {expression.ajoutOperateur(new Operateur(OpList.INFEG));}
 | ">" {expression.ajoutOperateur(new Operateur(OpList.SUP));}
 | ">=" {expression.ajoutOperateur(new Operateur(OpList.SUPEG));}
}

void opAdd() : {}
{
    "+" {expression.ajoutOperateur(new Operateur(OpList.PLUS));}
  |  "-" {expression.ajoutOperateur(new Operateur(OpList.MOINS));}
  | <OU> {expression.ajoutOperateur(new Operateur(OpList.OU));}
}

void opMul() : {}
{
  "*" {expression.ajoutOperateur(new Operateur(OpList.FOIS));}
  | "/" {expression.ajoutOperateur(new Operateur(OpList.DIV));}
  | <ET> {expression.ajoutOperateur(new Operateur(OpList.ET));}
}

void opNeg() : {}
{ "-" {expression.ajoutOperateur(new Operateur(OpList.NEG));}
 | <NON> {expression.ajoutOperateur(new Operateur(OpList.NON));}
}
